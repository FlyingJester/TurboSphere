
import os
import sys
import os

defaultenv	= Environment()

linuxenv	= defaultenv.Clone(tools = ['default', 'textfile'], CCFLAGS = "-O3 -g -mfpmath=sse,387 -mmmx -msse -msse2 -Wcast-align")

windowsenv 	= defaultenv.Clone(CCFLAGS = "/O2")

win32env	= windowsenv.Clone()
win64env	= windowsenv.Clone()

linux32env	= linuxenv.Clone()
linux64env	= linuxenv.Clone()

macintoshenv	= defaultenv.Clone()

AddOption('--install_libs',
                  dest='install_libs',
                  type='string',
                  nargs=1,
                  action='store',
                  help='Determines whether or not to try and install the core TurboSphere libraries')
AddOption('--build_plugins',
                  dest='build_plugins',
                  type='string',
                  nargs=1,
                  action='store',
                  help='Determines whether or not to build the plugins for TurboSphere.')
AddOption('--usemingw',
                  dest='usemingw',
                  type='string',
                  nargs=1,
                  action='store',
                  help='Use the MingW toolchain.')

#set up the environment depending on platform. Mainly for installing libraries.
if sys.platform == 'win32':
	lib_install_dir = './bin/Release'
	currentenv = win32env.Clone(LIBPATH=lib_install_dir)

	graphicalg_name    = './bin/Release/graphicalg'
	graphiccommon_name = './bin/Release/graphiccommon'
	configmanager_name = './bin/Release/configmanager'

else:
	graphicalg_name    = 'graphicalg'
	graphiccommon_name = 'graphiccommon'
	configmanager_name = 'configmanager'
	
	if sys.platform == 'linux':
		lib_install_dir = '/usr/lib/turbosphere'
		currentenv = linux32env.Clone(LIBPATH=lib_install_dir)
	else:
		lib_install_dir = '/usr/lib64/turbosphere'
		currentenv = linux64env.Clone(LIBPATH=lib_install_dir)


usemingw = GetOption('usemingw')
if usemingw == "y":
	currentenv.Replace(CC = ['i686-w64-mingw32-g++'])
	#currentenv.Tool('i686-w64-mingw32-g++')
	dummy = ""
	
setuplibs = "False"

lib_path = lib_install_dir
pluginpath = 'bin/Release/plugin'

graphiccommon_files = Split("""
	graphiccommon/screen.cpp
	graphiccommon/color.cpp""")

graphiccommon_path = ['graphiccommon']

graphicalg_files = Split("""./graphicalg/structures.cpp""")

graphicalg_path = ['./graphicalg']

configmanager_files = Split("""
	./configmanager/opengame.cpp
	./configmanager/openscript.cpp""")

configmanager_path = ['./configmanager']

turbosphere_files = Split("""
	./engine.cpp
	./loadplugins.cpp
	./functionload.cpp
	./variableregister.cpp""")

t5 = currentenv.SharedLibrary('t5', ['t5.cpp'])

graphicalg = currentenv.SharedLibrary('graphicalg', graphicalg_files, CPPPATH = graphicalg_path)

graphiccommon = currentenv.SharedLibrary('graphiccommon', graphiccommon_files, CPPPATH = graphiccommon_path)

configmanager = currentenv.SharedLibrary('configmanager', configmanager_files, CPPPATH = configmanager_path, LIBS = [t5, graphiccommon, 'v8'], LIBPATH = lib_path)

if sys.platform == 'darwin':
	programenv = currentenv.Clone()
	programenv.Append(FRAMEWORKS=['Cocoa', 'OpenGL'])
	turbosphere = programenv.Program(target = './bin/Release/turbosphere', source = turbosphere_files,
		LIBS=['v8', 'SDL', t5, graphicalg, graphiccommon, configmanager, 'pthread', 'dl', 'libSDLmain' ], 
		LIBPATH = lib_path)
else:
	turbosphere = currentenv.Program(target = './bin/Release/turbosphere', source = turbosphere_files,
		LIBS=['v8', 'SDL', t5, graphicalg, graphiccommon, configmanager, 'pthread', 'dl' ], 
		LIBPATH = lib_path)


plugin_libs = [t5, configmanager, graphicalg, graphiccommon, 'SDL', 'v8']
pluginsrc_path = 'plugins'
graphicSDL_files = ['graphic.cpp']
bmpfontSDL_files = ['bmpfont.cpp']
ttffontSDL_files = ['ttffont.cpp']
inputSDL_files = ['main.cpp,', 'mouse.cpp', 'key.cpp']
scriptfs_files = ['scriptfs.cpp']
getkeystring_files = ['getkeystring.cpp']
SDL_GL_path 	 = ['plugins/graphicSDL_GL']
SDL_GL_files	 = ['plugins/graphicSDL_GL/main.cpp', 'plugins/graphicSDL_GL/image.cpp', 'plugins/graphicSDL_GL/surface.cpp', 'plugins/graphicSDL_GL/color.cpp', 'plugins/graphicSDL_GL/primitives.cpp', 'plugins/graphicSDL_GL/screen.cpp']


build_plugins = GetOption('build_plugins')
if build_plugins != "n":
	if build_plugins == "y" or build_plugins == "all":

		if sys.platform == 'darwin':
			SDL_GL = currentenv.SharedLibrary('./bin/Release/plugin/SDL_GL', SDL_GL_files , LIBS = [plugin_libs, 'SDL_image', 'libSDLmain'], LIBPATH = lib_path)
		else:
			SDL_GL = currentenv.SharedLibrary('./bin/Release/plugin/SDL_GL', SDL_GL_files , LIBS = [plugin_libs, 'SDL_image', 'GL', 'GLU', 'X11'], LIBPATH = lib_path)
		
		bmpfontGL = currentenv.SharedLibrary('./bin/Release/plugin/bmpfontGL', ['plugins/bmpfontGL/bmpfont.cpp'], LIBS = plugin_libs, LIBPATH = lib_path)
		ttffontGL = currentenv.SharedLibrary('./bin/Release/plugin/ttffontGL', ['plugins/ttffontGL/ttffont.cpp'], LIBS = [plugin_libs, 'SDL_ttf'], LIBPATH = lib_path)
		inputSDL = currentenv.SharedLibrary('./bin/Release/plugin/inputSDL', ['plugins/inputSDL/main.cpp', 'plugins/inputSDL/joystick.cpp', 'plugins/inputSDL/mouse.cpp', 'plugins/inputSDL/key.cpp'], LIBS = plugin_libs, LIBPATH = lib_path)
		scriptfs = currentenv.SharedLibrary('./bin/Release/plugin/scriptfs', ['plugins/scriptfs/scriptfs.cpp'], LIBS = plugin_libs, LIBPATH = lib_path)
		getkeystring = currentenv.SharedLibrary('./bin/Release/plugin/getkeystring', ['plugins/getkeystring/getkeystring.cpp'], LIBS = plugin_libs, LIBPATH = lib_path)
		windowstyleGL = currentenv.SharedLibrary('./bin/Release/plugin/windowstyleGL', ['plugins/windowstyleGL/windowstyle.cpp'], LIBS = plugin_libs, LIBPATH = lib_path)
		#mapengineSDL = currentenv.SharedLibrary('./bin/Release/plugin/mapengineSDL', ['plugins/mapengineSDL/map.cpp', 'plugins/mapengineSDL/tileset.cpp'], LIBS = plugin_libs, LIBPATH = lib_path)

setuplibs = GetOption('install_libs')
if setuplibs == "y":
	print "Setting up libraries."
	currentenv.Install(lib_install_dir, [graphicalg, graphiccommon, configmanager, t5])
	if sys.platform != 'win32':
		print "Writing conf file."
		currentenv.Textfile(target = '/etc/ld.so.conf.d/turbosphere.conf', source = [lib_install_dir])
	
currentenv.Alias('libinstall', lib_install_dir)
currentenv.Alias('confwrite', '/etc/ld.so.conf.d')
currentenv.Alias('buildplugins', 'bin/Release')
